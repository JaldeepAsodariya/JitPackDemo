apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'

group='com.github.jaldeepasodariya'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
repositories {
    mavenCentral()
}

// Gradle task to check Google API key availability in AndroidManifest of root project
task validateManifest() {

    def xmlSource = file("${rootDir}/app/src/main/AndroidManifest.xml")
    def xmlParser = new XmlParser()
    def xmlRoot = xmlParser.parse(xmlSource)
    def metaDataNode = xmlRoot.application.'meta-data'
    def isAPIKeyAvailable = false
    metaDataNode.any { metadata ->

        metadata.attributes().any {

            if (it.value == "com.google.android.geo.API_KEY") {
                isAPIKeyAvailable = true
                return true
            } else isAPIKeyAvailable = false
        }

        if(isAPIKeyAvailable)
            return true
    }

    if (!isAPIKeyAvailable)
        throw new RuntimeException("Couldn\'t get Google API key from application meta data. Was it set in your AndroidManifest.xml?")
}

build.dependsOn validateManifest
